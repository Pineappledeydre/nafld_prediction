import streamlit as st
import numpy as np
import matplotlib.pyplot as plt
import pickle
import pandas as pd
from interpret.glassbox import ExplainableBoostingClassifier

st.set_page_config(page_title="NAFLD Prediction / –ü—Ä–æ–≥–Ω–æ–∑ –ù–ê–ñ–ë–ü", page_icon="üíâ", layout="wide")

# Load the trained EBM model
MODEL_PATH = "models/ebm_model.pkl"

with open(MODEL_PATH, "rb") as file:
    ebm = pickle.load(file)

# Language Selection
lang = st.radio("üåç **Select Language / –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:**", ("English", "–†—É—Å—Å–∫–∏–π"))

# Translations
translations = {
    "title": {"English": "üíâ NAFLD Prediction", "–†—É—Å—Å–∫–∏–π": "üíâ –ü—Ä–æ–≥–Ω–æ–∑ –ù–ê–ñ–ë–ü"},
    "desc": {
        "English": "Enter your health data to predict the probability of NAFLD.",
        "–†—É—Å—Å–∫–∏–π": "–í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∞ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –ù–ê–ñ–ë–ü.",
    },
    "gender": {"English": "**Select Gender:**", "–†—É—Å—Å–∫–∏–π": "**–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª:**"},
    "male": {"English": "Male", "–†—É—Å—Å–∫–∏–π": "–ú—É–∂—Å–∫–æ–π"},
    "female": {"English": "Female", "–†—É—Å—Å–∫–∏–π": "–ñ–µ–Ω—Å–∫–∏–π"},
    "height": {"English": "**Height (cm):**", "–†—É—Å—Å–∫–∏–π": "**–†–æ—Å—Ç (—Å–º):**"},
    "weight": {"English": "**Weight (kg):**", "–†—É—Å—Å–∫–∏–π": "**–í–µ—Å (–∫–≥):**"},
    "bmi_calc": {"English": "BMI is calculated automatically.", "–†—É—Å—Å–∫–∏–π": "–ò–ú–¢ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏."},
    "calculate": {"English": "Calculate Prediction", "–†—É—Å—Å–∫–∏–π": "–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –ü—Ä–æ–≥–Ω–æ–∑"},
    "probability": {"English": "Probability", "–†—É—Å—Å–∫–∏–π": "–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å"},
    "class": {"English": "Class", "–†—É—Å—Å–∫–∏–π": "–ö–ª–∞—Å—Å"},
    "healthy": {"English": "Healthy", "–†—É—Å—Å–∫–∏–π": "–ó–¥–æ—Ä–æ–≤"},
    "sick": {"English": "Sick", "–†—É—Å—Å–∫–∏–π": "–ë–æ–ª–µ–Ω"},
    "alert": {"English": "üö® Model predicts that you are sick.", "–†—É—Å—Å–∫–∏–π": "üö® –ú–æ–¥–µ–ª—å –ø—Ä–µ–¥—Å–∫–∞–∑—ã–≤–∞–µ—Ç, —á—Ç–æ –≤—ã –±–æ–ª—å–Ω—ã."},
    "success": {"English": "‚úÖ Model predicts that you are healthy.", "–†—É—Å—Å–∫–∏–π": "‚úÖ –ú–æ–¥–µ–ª—å –ø—Ä–µ–¥—Å–∫–∞–∑—ã–≤–∞–µ—Ç, —á—Ç–æ –≤—ã –∑–¥–æ—Ä–æ–≤—ã."},
    "prediction results": {"English": "Prediction Results", "–†—É—Å—Å–∫–∏–π": "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ü—Ä–æ–≥–Ω–æ–∑–∞ "}
}

# Extract expected feature names from the model
feature_names = ebm.term_names_

# Feature Translations
feature_translations = {
    "–ò–ú–¢": {"English": "BMI", "–†—É—Å—Å–∫–∏–π": "–ò–ú–¢"},  # ‚úÖ Added this missing key
    "–í–æ–∑—Ä–∞—Å—Ç": {"English": "Age", "–†—É—Å—Å–∫–∏–π": "–í–æ–∑—Ä–∞—Å—Ç"},
    "–û.–∂.,%": {"English": "Total Fat %", "–†—É—Å—Å–∫–∏–π": "–û–±—â–∏–π –ñ–∏—Ä,%"},
    "–í–∏—Å—Ü.–∂,%": {"English": "Visceral Fat %", "–†—É—Å—Å–∫–∏–π": "–í–∏—Å—Ü. –ñ–∏—Ä,%"},
    "–°–∫–µ–ª–µ—Ç,%": {"English": "Skeletal %", "–†—É—Å—Å–∫–∏–π": "–°–∫–µ–ª–µ—Ç %"},
    "–ö–æ—Å—Ç–∏,–∫–≥": {"English": "Bone Mass (kg)", "–†—É—Å—Å–∫–∏–π": "–ö–æ—Å—Ç–∏,–∫–≥"},
    "–í–æ–¥–∞,%": {"English": "Water %", "–†—É—Å—Å–∫–∏–π": "–í–æ–¥–∞,%"},
    "–°–û–û–í,–∫–∫–∞–ª": {"English": "Metabolic Rate (kcal)", "–†—É—Å—Å–∫–∏–π": "–°–∫–æ—Ä–æ—Å—Ç—å –û–±–º–µ–Ω–∞ –í–µ—â–µ—Å—Ç–≤,–∫–∫–∞–ª"},
    "–û–ì,—Å–º": {"English": "Chest Circumference", "–†—É—Å—Å–∫–∏–π": "–û–±—Ö–≤–∞—Ç –ì—Ä—É–¥–∏,—Å–º"},
    "–û–¢,—Å–º": {"English": "Waist Circumference", "–†—É—Å—Å–∫–∏–π": "–û–±—Ö–≤–∞—Ç –¢–∞–ª–∏–∏,—Å–º"},
    "–û–ñ,—Å–º": {"English": "Hip Circumference", "–†—É—Å—Å–∫–∏–π": "–û–±—Ö–≤–∞—Ç –ñ–∏–≤–æ—Ç–∞,—Å–º"},
    "–û–ë,—Å–º": {"English": "Thigh Circumference", "–†—É—Å—Å–∫–∏–π": "–û–±—Ö–≤–∞—Ç –ë–µ–¥—Ä–∞,—Å–º"},
    "–ê–õ–¢": {"English": "ALT", "–†—É—Å—Å–∫–∏–π": "–ê–õ–¢"},
    "–ê–°–¢": {"English": "AST", "–†—É—Å—Å–∫–∏–π": "–ê–°–¢"},
    "–ì–ì–¢–ü": {"English": "GGT", "–†—É—Å—Å–∫–∏–π": "–ì–ì–¢–ü"},
    "–©–§": {"English": "ALP", "–†—É—Å—Å–∫–∏–π": "–©–§"},
    "–•–°–æ–±—â.": {"English": "Total Cholesterol", "–†—É—Å—Å–∫–∏–π": "–•–æ–ª–µ—Å—Ç–µ—Ä–∏–Ω –û–±—â."},
    "–õ–ü–ù–ü": {"English": "LDL", "–†—É—Å—Å–∫–∏–π": "–õ–ü–ù–ü"},
    "–õ–ü–í–ü": {"English": "HDL", "–†—É—Å—Å–∫–∏–π": "–õ–ü–í–ü"},
    "–¢—Ä–∏–≥–ª–∏—Ü.": {"English": "Triglycerides", "–†—É—Å—Å–∫–∏–π": "–¢—Ä–∏–≥–ª–∏—Ü."},
    "–ë–∏–ª–∏—Ä.–æ": {"English": "Bilirubin (Total)", "–†—É—Å—Å–∫–∏–π": "–ë–∏–ª–∏—Ä. –û–±—â."},
    "–ë–∏–ª–∏—Ä.–ø—Ä": {"English": "Bilirubin (Direct)", "–†—É—Å—Å–∫–∏–π": "–ë–∏–ª–∏—Ä. –ü—Ä—è–º–æ–π"},
    "–ì–ª—é–∫–æ–∑–∞": {"English": "Glucose", "–†—É—Å—Å–∫–∏–π": "–ì–ª—é–∫–æ–∑–∞"},
    "–ò–Ω—Å—É–ª–∏–Ω": {"English": "Insulin", "–†—É—Å—Å–∫–∏–π": "–ò–Ω—Å—É–ª–∏–Ω"},
    "–§–µ—Ä—Ä–∏—Ç–∏–Ω": {"English": "Ferritin", "–†—É—Å—Å–∫–∏–π": "–§–µ—Ä—Ä–∏—Ç–∏–Ω"},
    "–°–†–ë": {"English": "CRP", "–†—É—Å—Å–∫–∏–π": "–°–†–ë"},
    "–û.–±–µ–ª–æ–∫": {"English": "Total Protein", "–†—É—Å—Å–∫–∏–π": "–û–±—â–∏–π –ë–µ–ª–æ–∫"},
    "–ú–æ—á.–∫-—Ç–∞": {"English": "Uric Acid", "–†—É—Å—Å–∫–∏–π": "–ú–æ—á.–ö-—Ç–∞"},
}

# Normal ranges for reference
normal_ranges = {
    '–ü–æ–ª': (0, 1),  # Binary: 0 (–ú—É–∂—Å–∫–æ–π), 1 (–ñ–µ–Ω—Å–∫–∏–π)
    '–í–æ–∑—Ä–∞—Å—Ç': (0, 100),
    '–û.–∂.,%': (10, 25),
    '–í–∏—Å—Ü.–∂,%': (5, 15),
    '–°–∫–µ–ª–µ—Ç,%': (30, 40),
    '–ö–æ—Å—Ç–∏,–∫–≥': (2, 5),
    '–í–æ–¥–∞,%': (50, 70),
    '–°–û–û–í,–∫–∫–∞–ª': (1500, 3500),
    '–û–ì,—Å–º': (75, 105),
    '–û–¢,—Å–º': (60, 95),
    '–û–ñ,—Å–º': (70, 105),
    '–û–ë,—Å–º': (40, 65),
    '–ò–ú–¢': (18.5, 24.9),
    '–ê–õ–¢': (7, 41),
    '–ê–°–¢': (10, 40),
    '–ì–ì–¢–ü': (10, 70),
    '–©–§': (40, 130),
    '–•–°–æ–±—â.': (0, 5.2),
    '–õ–ü–ù–ü': (0, 3.0),
    '–õ–ü–í–ü': (0.7, 2.3),
    '–¢—Ä–∏–≥–ª–∏—Ü.': (0, 1.7),
    '–ë–∏–ª–∏—Ä.–æ': (0, 1.2),
    '–ë–∏–ª–∏—Ä.–ø—Ä': (0, 0.3),
    '–ì–ª—é–∫–æ–∑–∞': (3.9, 5.5),
    '–ò–Ω—Å—É–ª–∏–Ω': (2.0, 25.0),  # Missing before
    '–§–µ—Ä—Ä–∏—Ç–∏–Ω': (15, 300),  # Missing before
    '–°–†–ë': (0, 3),  # Missing before
    '–û.–±–µ–ª–æ–∫': (6.0, 8.5),  # Missing before
    '–ú–æ—á.–∫-—Ç–∞': (2.4, 7.0)  # Missing before
}

# Streamlit UI
st.title(translations["title"][lang])
st.write(translations["desc"][lang])

# Gender Selection
gender = st.radio(translations["gender"][lang], (translations["male"][lang], translations["female"][lang]))
gender_value = 0 if gender == translations["male"][lang] else 1

# Height & Weight Inputs
height = st.number_input(translations["height"][lang], min_value=100, max_value=250, value=170)
weight = st.number_input(translations["weight"][lang], min_value=30, max_value=200, value=70)
bmi = weight / ((height / 100) ** 2)  # BMI Calculation
st.write(f"**–ò–ú–¢ / BMI:** {bmi:.2f} ({translations['bmi_calc'][lang]})")

user_input_dict = {
    '–ü–æ–ª': gender_value,
    '–í–æ–∑—Ä–∞—Å—Ç': st.number_input(f"**{feature_translations['–í–æ–∑—Ä–∞—Å—Ç'][lang]}**", min_value=0, max_value=100, value=50),
    '–û.–∂.,%': st.number_input(f"**{feature_translations['–û.–∂.,%'][lang]}**", min_value=0.0, max_value=70.0, value=20.0),
    '–í–∏—Å—Ü.–∂,%': st.number_input(f"**{feature_translations['–í–∏—Å—Ü.–∂,%'][lang]}**", min_value=0.0, max_value=50.0, value=10.0),
    '–°–∫–µ–ª–µ—Ç,%': st.number_input(f"**{feature_translations['–°–∫–µ–ª–µ—Ç,%'][lang]}**", min_value=0.0, max_value=100.0, value=35.0),
    '–ö–æ—Å—Ç–∏,–∫–≥': st.number_input(f"**{feature_translations['–ö–æ—Å—Ç–∏,–∫–≥'][lang]}**", min_value=0.0, max_value=20.0, value=3.0),
    '–í–æ–¥–∞,%': st.number_input(f"**{feature_translations['–í–æ–¥–∞,%'][lang]}**", min_value=0.0, max_value=100.0, value=60.0),
    '–°–û–û–í,–∫–∫–∞–ª': st.number_input(f"**{feature_translations['–°–û–û–í,–∫–∫–∞–ª'][lang]}**", min_value=0.0, max_value=7000.0, value=2000.0),
    '–û–ì,—Å–º': st.number_input(f"**{feature_translations['–û–ì,—Å–º'][lang]}**", min_value=0.0, max_value=150.0, value=90.0),
    '–û–¢,—Å–º': st.number_input(f"**{feature_translations['–û–¢,—Å–º'][lang]}**", min_value=0.0, max_value=150.0, value=80.0),
    '–û–ñ,—Å–º': st.number_input(f"**{feature_translations['–û–ñ,—Å–º'][lang]}**", min_value=0.0, max_value=150.0, value=90.0),
    '–û–ë,—Å–º': st.number_input(f"**{feature_translations['–û–ë,—Å–º'][lang]}**", min_value=0.0, max_value=150.0, value=50.0),
    '–ò–ú–¢': bmi,  # BMI is auto-calculated
    '–ê–õ–¢': st.number_input(f"**{feature_translations['–ê–õ–¢'][lang]}**", min_value=0.0, max_value=200.0, value=20.0),
    '–ê–°–¢': st.number_input(f"**{feature_translations['–ê–°–¢'][lang]}**", min_value=0.0, max_value=200.0, value=20.0),
    '–ì–ì–¢–ü': st.number_input(f"**{feature_translations['–ì–ì–¢–ü'][lang]}**", min_value=0.0, max_value=200.0, value=50.0),
    '–©–§': st.number_input(f"**{feature_translations['–©–§'][lang]}**", min_value=0.0, max_value=500.0, value=80.0),
    '–•–°–æ–±—â.': st.number_input(f"**{feature_translations['–•–°–æ–±—â.'][lang]}**", min_value=0.0, max_value=30.0, value=3.0),
    '–õ–ü–ù–ü': st.number_input(f"**{feature_translations['–õ–ü–ù–ü'][lang]}**", min_value=0.0, max_value=20.0, value=2.0),
    '–õ–ü–í–ü': st.number_input(f"**{feature_translations['–õ–ü–í–ü'][lang]}**", min_value=0.0, max_value=20.0, value=1.0),
    '–¢—Ä–∏–≥–ª–∏—Ü.': st.number_input(f"**{feature_translations['–¢—Ä–∏–≥–ª–∏—Ü.'][lang]}**", min_value=0.0, max_value=50.0, value=1.5),
    '–ë–∏–ª–∏—Ä.–æ': st.number_input(f"**{feature_translations['–ë–∏–ª–∏—Ä.–æ'][lang]}**", min_value=0.0, max_value=30.0, value=1.0),
    '–ë–∏–ª–∏—Ä.–ø—Ä': st.number_input(f"**{feature_translations['–ë–∏–ª–∏—Ä.–ø—Ä'][lang]}**", min_value=0.0, max_value=30.0, value=0.5),
    '–ì–ª—é–∫–æ–∑–∞': st.number_input(f"**{feature_translations['–ì–ª—é–∫–æ–∑–∞'][lang]}**", min_value=0.0, max_value=50.0, value=5.0),
    '–ò–Ω—Å—É–ª–∏–Ω': st.number_input(f"**{feature_translations['–ò–Ω—Å—É–ª–∏–Ω'][lang]}**", min_value=0.0, max_value=100.0, value=5.0),
    '–§–µ—Ä—Ä–∏—Ç–∏–Ω': st.number_input(f"**{feature_translations['–§–µ—Ä—Ä–∏—Ç–∏–Ω'][lang]}**", min_value=0.0, max_value=1000.0, value=150.0),
    '–°–†–ë': st.number_input(f"**{feature_translations['–°–†–ë'][lang]}**", min_value=0.0, max_value=20.0, value=1.0),
    '–û.–±–µ–ª–æ–∫': st.number_input(f"**{feature_translations['–û.–±–µ–ª–æ–∫'][lang]}**", min_value=0.0, max_value=20.0, value=7.0),
    '–ú–æ—á.–∫-—Ç–∞': st.number_input(f"**{feature_translations['–ú–æ—á.–∫-—Ç–∞'][lang]}**", min_value=0.0, max_value=50.0, value=5.0)
}
user_input_dict['–ò–ú–¢'] = bmi  # BMI is auto-calculated


try:
    input_df = pd.DataFrame([user_input_dict])
    input_df = input_df[ebm.feature_names_in_]
    input_array = input_df.to_numpy()
except KeyError as e:
    st.error(f"Missing required features: {e}")
    st.stop()

# Debugging
# print(f"Model Expected Features: {ebm.feature_names_in_}")
# print(f"Input Data Features: {list(input_df.columns)}")
# print(f"Final input shape: {input_array.shape}")  # Must match (1, 29)

# Predict probability and classify
if st.button(translations["calculate"][lang]):
    try:
        probability = ebm.predict_proba(input_array)[0][1]
        predicted_class = translations["sick"][lang] if probability >= 0.5 else translations["healthy"][lang]
        st.success(f"{translations['probability'][lang]}: {probability:.4f} ({predicted_class})")
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ / Error: {e}")

    st.subheader(translations["prediction results"][lang])
    st.write(f"**{translations['probability'][lang]}:** {probability:.4f}")
    st.write(f"**{translations['class'][lang]}:** {predicted_class}")

    if predicted_class == translations["sick"][lang]:
        st.error(translations["alert"][lang])
    else:
        st.success(translations["success"][lang])

    # Normalize user values for comparison (excluding Gender and Age)
    plot_features = [key for key in normal_ranges.keys() if key not in ["–ü–æ–ª", "–í–æ–∑—Ä–∞—Å—Ç"]]  # Exclude "–ü–æ–ª" (Gender) & "–í–æ–∑—Ä–∞—Å—Ç" (Age)
    normal_min = [normal_ranges[key][0] for key in plot_features]
    normal_max = [normal_ranges[key][1] for key in plot_features]
    user_values = [user_input_dict[key] for key in plot_features]  # Get user-entered values

    # Normalize function
    def normalize(values, min_vals, max_vals):
        return [(val - min_val) / (max_val - min_val) if max_val != min_val else 0 for val, min_val, max_val in zip(values, min_vals, max_vals)]

    normalized_user_values = normalize(user_values, normal_min, normal_max)

    # Plot comparison graph
    fig, ax = plt.subplots(figsize=(10, 8))

    # Plot normal range bars
    normal_range_added = False  

    for i, (min_val, max_val) in enumerate(zip([0] * len(normal_min), [1] * len(normal_max))):
        ax.barh(
            i, 
            max_val - min_val, 
            left=min_val, 
            color='gray', 
            alpha=0.5, 
            label=("Normal Range" if lang == "English" else "–ù–æ—Ä–º–∞") if not normal_range_added else "", 
            height=0.5
        )
        normal_range_added = True  # Ensure the label is added only once
    # Plot user values
    for i, value in enumerate(normalized_user_values):
        ax.scatter(value, i, color='blue', s=100, zorder=5)

    # Add only ONE legend entry for 'Your Value' / '–í–∞—à–µ –∑–Ω–∞—á–µ–Ω–∏–µ'
    ax.scatter([], [], color='blue', s=100, label="Your Value" if lang == "English" else "–í–∞—à–µ –∑–Ω–∞—á–µ–Ω–∏–µ")

    # Translate feature labels
    translated_labels = [feature_translations[feat][lang] for feat in plot_features]

    # Formatting
    ax.set_xlim([-0.1, 1.1])
    ax.get_xaxis().set_visible(False)
    ax.set_xlabel(translations["probability"][lang], fontsize=12, fontweight='bold')
    ax.set_title(translations["title"][lang], fontsize=14, fontweight='bold')
    ax.set_yticks(range(len(plot_features)))
    ax.set_yticklabels(translated_labels, fontsize=11, fontweight='bold')

    ax.legend(loc='upper left', fontsize=10)
    st.pyplot(fig)



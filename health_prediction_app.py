
import streamlit as st
import numpy as np
import matplotlib.pyplot as plt

# Define the unscaled coefficients and intercept
unscaled_coefficients = {
    '–û.–∂.,%': 0.011731,
    '–í–∏—Å—Ü.–∂,%': 0.256571,
    '–ú—ã—à.–º,%': -0.118061,
    '–ò–ú–¢': 0.175329,
    '–ê–õ–¢': 0.109809,
    '–ê–°–¢': 0.060320,
    '–ì–ì–¢–ü': 0.063493,
    '–û.–±–µ–ª–æ–∫': -0.118442
}

unscaled_intercept = 1.01741283

# Function to predict probability and class based on input features
def predict_probability_and_class(features, threshold=0.5):
    y_pred = unscaled_intercept
    for feature, coef in unscaled_coefficients.items():
        y_pred += coef * features.get(feature, 0)
    probability = 1 / (1 + np.exp(-y_pred))
    predicted_class = "–ë–æ–ª–µ–Ω" if probability >= threshold else "–ó–¥–æ—Ä–æ–≤"
    return probability, predicted_class

# Streamlit App Interface
st.set_page_config(page_title="–ü—Ä–æ–≥–Ω–æ–∑ –ù–ê–ñ–ë–ü", page_icon="üíâ", layout="wide")

# App Title and Description
st.title("üíâ –ü—Ä–æ–≥–Ω–æ–∑ –ù–ê–ñ–ë–ü")
st.write("–í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∞ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –ù–ê–ñ–ë–ü.")

# Gender selection
gender = st.radio("**–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª:**", ("–ú—É–∂—Å–∫–æ–π", "–ñ–µ–Ω—Å–∫–∏–π"))

# Adjust normal ranges based on gender
if gender == "–ú—É–∂—Å–∫–æ–π":
    normal_ranges = {
        '–û–∂–∏—Ä–µ–Ω–∏–µ, %': (10, 20),
        '–í–∏—Å—Ü–µ—Ä–∞–ª—å–Ω—ã–π –∂–∏—Ä, %': (5, 15),
        '–ú—ã—à–µ—á–Ω–∞—è –º–∞—Å—Å–∞, %': (40, 50),
        '–ò–ú–¢': (18.5, 24.9),
        '–ê–õ–¢ (–µ–¥/–ª)': (7, 56),
        '–ê–°–¢ (–µ–¥/–ª)': (8, 48),
        '–ì–ì–¢–ü (–µ–¥/–ª)': (9, 48),
        '–û–±—â–∏–π –±–µ–ª–æ–∫ (–≥/–ª)': (6.0, 8.3)
    }
else:
    normal_ranges = {
        '–û–∂–∏—Ä–µ–Ω–∏–µ, %': (18, 28),
        '–í–∏—Å—Ü–µ—Ä–∞–ª—å–Ω—ã–π –∂–∏—Ä, %': (5, 15),
        '–ú—ã—à–µ—á–Ω–∞—è –º–∞—Å—Å–∞, %': (30, 40),
        '–ò–ú–¢': (18.5, 24.9),
        '–ê–õ–¢ (–µ–¥/–ª)': (7, 56),
        '–ê–°–¢ (–µ–¥/–ª)': (8, 48),
        '–ì–ì–¢–ü (–µ–¥/–ª)': (9, 48),
        '–û–±—â–∏–π –±–µ–ª–æ–∫ (–≥/–ª)': (6.0, 8.3)
    }

# Layout for input and results
col1, col2 = st.columns(2)

with col1:
    st.header("**–í–≤–µ–¥–∏—Ç–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:**")
    –û_–∂ = st.number_input("**–û–∂–∏—Ä–µ–Ω–∏–µ, %**", min_value=0.0, max_value=100.0, value=25.0)
    –í–∏—Å—Ü_–∂ = st.number_input("**–í–∏—Å—Ü–µ—Ä–∞–ª—å–Ω—ã–π –∂–∏—Ä, %**", min_value=0.0, max_value=100.0, value=15.0)
    –ú—ã—à_–º = st.number_input("**–ú—ã—à–µ—á–Ω–∞—è –º–∞—Å—Å–∞, %**", min_value=0.0, max_value=100.0, value=45.0)
    –ò–ú–¢ = st.number_input("**–ò–Ω–¥–µ–∫—Å –º–∞—Å—Å—ã —Ç–µ–ª–∞ (–ò–ú–¢)**", min_value=0.0, max_value=100.0, value=24.0)
    –ê–õ–¢ = st.number_input("**–ê–õ–¢ (–µ–¥/–ª)**", min_value=0.0, max_value=200.0, value=30.0)
    –ê–°–¢ = st.number_input("**–ê–°–¢ (–µ–¥/–ª)**", min_value=0.0, max_value=200.0, value=20.0)
    –ì–ì–¢–ü = st.number_input("**–ì–ì–¢–ü (–µ–¥/–ª)**", min_value=0.0, max_value=200.0, value=55.0)
    –û_–±–µ–ª–æ–∫ = st.number_input("**–û–±—â–∏–π –±–µ–ª–æ–∫ (–≥/–ª)**", min_value=0.0, max_value=20.0, value=6.0)

with col2:
    if st.button("–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –ü—Ä–æ–≥–Ω–æ–∑"):
        # Input features
        input_features = {
            '–û.–∂.,%': –û_–∂,
            '–í–∏—Å—Ü.–∂,%': –í–∏—Å—Ü_–∂,
            '–ú—ã—à.–º,%': –ú—ã—à_–º,
            '–ò–ú–¢': –ò–ú–¢,
            '–ê–õ–¢': –ê–õ–¢,
            '–ê–°–¢': –ê–°–¢,
            '–ì–ì–¢–ü': –ì–ì–¢–ü,
            '–û.–±–µ–ª–æ–∫': –û_–±–µ–ª–æ–∫
        }
        probability, predicted_class = predict_probability_and_class(input_features)

        # Display the results with visuals
        st.subheader("**–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ü—Ä–æ–≥–Ω–æ–∑–∞:**")
        st.write(f"**–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å:** {probability:.4f}")
        st.write(f"**–ö–ª–∞—Å—Å:** {predicted_class}")

        if predicted_class == "–ë–æ–ª–µ–Ω":
            st.error("–ú–æ–¥–µ–ª—å –ø—Ä–µ–¥—Å–∫–∞–∑—ã–≤–∞–µ—Ç, —á—Ç–æ –≤—ã –±–æ–ª—å–Ω—ã.")
        else:
            st.success("–ú–æ–¥–µ–ª—å –ø—Ä–µ–¥—Å–∫–∞–∑—ã–≤–∞–µ—Ç, —á—Ç–æ –≤—ã –∑–¥–æ—Ä–æ–≤—ã.")

        # Visual comparison of inputs vs normal ranges
        st.subheader("**–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π —Å –Ω–æ—Ä–º–∞–ª—å–Ω—ã–º–∏ –¥–∏–∞–ø–∞–∑–æ–Ω–∞–º–∏**")
        fig, ax = plt.subplots(figsize=(8, 5))
        features = ['–û–∂–∏—Ä–µ–Ω–∏–µ, %', '–í–∏—Å—Ü–µ—Ä–∞–ª—å–Ω—ã–π –∂–∏—Ä, %', '–ú—ã—à–µ—á–Ω–∞—è –º–∞—Å—Å–∞, %', '–ò–ú–¢', '–ê–õ–¢ (–µ–¥/–ª)', '–ê–°–¢ (–µ–¥/–ª)', '–ì–ì–¢–ü (–µ–¥/–ª)', '–û–±—â–∏–π –±–µ–ª–æ–∫ (–≥/–ª)']
        user_values = [–û_–∂, –í–∏—Å—Ü_–∂, –ú—ã—à_–º, –ò–ú–¢, –ê–õ–¢, –ê–°–¢, –ì–ì–¢–ü, –û_–±–µ–ª–æ–∫]
        normal_min = [normal_ranges[feat][0] for feat in features]
        normal_max = [normal_ranges[feat][1] for feat in features]

        # Ensure x and y are the same size by plotting for every feature
        # Plot normal ranges as horizontal lines
        for i, (min_val, max_val) in enumerate(zip(normal_min, normal_max)):
            ax.plot([min_val, max_val], [i, i], color='gray', lw=6, alpha=0.5, label='–ù–æ—Ä–º–∞–ª—å–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω' if i == 0 else "")

        # Plot user values as blue markers on top of the normal ranges
        ax.scatter(user_values, range(len(features)), color='blue', s=100, zorder=5, label='–í–∞—à–∏ –∑–Ω–∞—á–µ–Ω–∏—è')

        # Design improvements
        ax.set_xlabel('–ó–Ω–∞—á–µ–Ω–∏—è', fontsize=12, fontweight='bold')
        ax.set_title('–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π —Å –Ω–æ—Ä–º–∞–ª—å–Ω—ã–º–∏ –¥–∏–∞–ø–∞–∑–æ–Ω–∞–º–∏', fontsize=14, fontweight='bold')

        # Customize ticks and labels
        ax.set_yticks(range(len(features)))
        ax.set_yticklabels(features, fontsize=11, fontweight='bold')
        ax.tick_params(axis='x', labelsize=10)
        ax.xaxis.label.set_size(12)

        # Remove right and top spines (axes)
        ax.spines['right'].set_visible(False)
        ax.spines['top'].set_visible(False)

        # Bold the axes
        ax.spines['left'].set_linewidth(1.5)
        ax.spines['bottom'].set_linewidth(1.5)

        # Set grid for better readability
        ax.grid(True, axis='x', linestyle='--', alpha=0.6)

        # Add a legend with better positioning
        ax.legend(loc='lower right', fontsize=10)

        # Display the plot
        st.pyplot(fig)

# Footer
st.write("---")
st.write("–≠—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ –¥–ª—è –ø–æ–º–æ—â–∏ –≤ –ø—Ä–æ–≥–Ω–æ–∑–µ –ù–ê–ñ–ë–ü –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π.")
st.write("–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –±–∏–æ—Ö–∏–º–∏—á–µ—Å–∫–∏–µ –º–∞—Ä–∫–µ—Ä—ã, –∏–Ω–¥–µ–∫—Å –º–∞—Å—Å—ã —Ç–µ–ª–∞, –∏ –¥—Ä—É–≥–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã.")
st.write("–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ù–ï —Å–æ–∑–¥–∞–Ω–æ –¥–ª—è —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ–π –ø–æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –¥–∏–∞–≥–Ω–æ–∑–∞.")
    
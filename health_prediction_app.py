import streamlit as st
import numpy as np
import matplotlib.pyplot as plt

unscaled_coefficients = {
    '–í–æ–∑—Ä–∞—Å—Ç': -0.052959,
    '–í–∏—Å—Ü.–∂,%': 0.408395,
    '–ú—ã—à.–º,%': -0.169631,
    '–ò–ú–¢': 0.178240,
    '–ê–õ–¢': 0.119727,
    '–ê–°–¢': 0.060623,
    '–ì–ì–¢–ü': 0.090496,
    '–õ–ü–ù–ü': -0.550825,
    '–§–µ—Ä—Ä–∏—Ç–∏–Ω': -0.005117,
    '–û.–±–µ–ª–æ–∫': -0.107443
}

unscaled_intercept = 5.67207853

def predict_probability_and_class(features, threshold=0.5):
    y_pred = unscaled_intercept
    for feature, coef in unscaled_coefficients.items():
        y_pred += coef * features.get(feature, 0)
    probability = 1 / (1 + np.exp(-y_pred))
    predicted_class = "–ë–æ–ª–µ–Ω" if probability >= threshold else "–ó–¥–æ—Ä–æ–≤"
    return probability, predicted_class

st.set_page_config(page_title="–ü—Ä–æ–≥–Ω–æ–∑ –ù–ê–ñ–ë–ü", page_icon="üíâ", layout="wide")

st.title("üíâ –ü—Ä–æ–≥–Ω–æ–∑ –ù–ê–ñ–ë–ü")
st.write("–í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∞ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –ù–ê–ñ–ë–ü.")

gender = st.radio("**–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª:**", ("–ú—É–∂—Å–∫–æ–π", "–ñ–µ–Ω—Å–∫–∏–π"))

if gender == "–ú—É–∂—Å–∫–æ–π":
    normal_ranges = {
        '–í–æ–∑—Ä–∞—Å—Ç': (0, 100),
        '–í–∏—Å—Ü–µ—Ä–∞–ª—å–Ω—ã–π –∂–∏—Ä, %': (1, 10),
        '–ú—ã—à–µ—á–Ω–∞—è –º–∞—Å—Å–∞, %': (40, 50),
        '–ò–ú–¢': (18.5, 24.9),
        '–ê–õ–¢ (–µ–¥/–ª)': (7, 42),
        '–ê–°–¢ (–µ–¥/–ª)': (7, 42),
        '–ì–ì–¢–ü (–µ–¥/–ª)': (9, 40),
        '–õ–ü–ù–ü (–º–º–æ–ª—å/–ª)': (2, 5),
        '–§–µ—Ä—Ä–∏—Ç–∏–Ω (–Ω–≥/–º–ª)': (20, 250),
        '–û–±—â–∏–π –±–µ–ª–æ–∫ (–≥/–ª)': (60, 85)
    }
else:
    normal_ranges = {
        '–í–æ–∑—Ä–∞—Å—Ç': (0, 100),
        '–í–∏—Å—Ü–µ—Ä–∞–ª—å–Ω—ã–π –∂–∏—Ä, %': (1, 10),
        '–ú—ã—à–µ—á–Ω–∞—è –º–∞—Å—Å–∞, %': (30, 40),
        '–ò–ú–¢': (18.5, 24.9),
        '–ê–õ–¢ (–µ–¥/–ª)': (7, 42),
        '–ê–°–¢ (–µ–¥/–ª)': (7, 42),
        '–ì–ì–¢–ü (–µ–¥/–ª)': (9, 32),
        '–õ–ü–ù–ü (–º–º–æ–ª—å/–ª)': (1.9, 4.6),
        '–§–µ—Ä—Ä–∏—Ç–∏–Ω (–Ω–≥/–º–ª)': (10, 130),
        '–û–±—â–∏–π –±–µ–ª–æ–∫ (–≥/–ª)': (60, 85)
    }

col1, col2 = st.columns(2)

with col1:
    st.header("**–í–≤–µ–¥–∏—Ç–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:**")
    age = st.number_input("**–í–æ–∑—Ä–∞—Å—Ç**", min_value=0, max_value=100, value=30)
    vis_fat = st.number_input("**–í–∏—Å—Ü–µ—Ä–∞–ª—å–Ω—ã–π –∂–∏—Ä, %**", min_value=0.0, max_value=100.0, value=5.0)
    muscle_mass = st.number_input("**–ú—ã—à–µ—á–Ω–∞—è –º–∞—Å—Å–∞, %**", min_value=0.0, max_value=100.0, value=30.0)
    bmi = st.number_input("**–ò–Ω–¥–µ–∫—Å –º–∞—Å—Å—ã —Ç–µ–ª–∞ (–ò–ú–¢)**", min_value=0.0, max_value=100.0, value=24.0)
    alt = st.number_input("**–ê–õ–¢ (–µ–¥/–ª)**", min_value=0.0, max_value=200.0, value=30.0)
    ast = st.number_input("**–ê–°–¢ (–µ–¥/–ª)**", min_value=0.0, max_value=200.0, value=30.0)
    ggtp = st.number_input("**–ì–ì–¢–ü (–µ–¥/–ª)**", min_value=0.0, max_value=200.0, value=15.0)
    ldl = st.number_input("**–õ–ü–ù–ü (–º–º–æ–ª—å/–ª)**", min_value=0.0, max_value=10.0, value=3.0)
    ferritin = st.number_input("**–§–µ—Ä—Ä–∏—Ç–∏–Ω (–Ω–≥/–º–ª)**", min_value=0.0, max_value=1000.0, value=50.0)
    total_protein = st.number_input("**–û–±—â–∏–π –±–µ–ª–æ–∫ (–≥/–ª)**", min_value=0.0, max_value=100.0, value=70.0)

with col2:
    if st.button("–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –ü—Ä–æ–≥–Ω–æ–∑"):
        input_features = {
            '–í–æ–∑—Ä–∞—Å—Ç': age,
            '–í–∏—Å—Ü.–∂,%': vis_fat,
            '–ú—ã—à.–º,%': muscle_mass,
            '–ò–ú–¢': bmi,
            '–ê–õ–¢': alt,
            '–ê–°–¢': ast,
            '–ì–ì–¢–ü': ggtp,
            '–õ–ü–ù–ü': ldl,
            '–§–µ—Ä—Ä–∏—Ç–∏–Ω': ferritin,
            '–û.–±–µ–ª–æ–∫': total_protein
        }
        probability, predicted_class = predict_probability_and_class(input_features)

        st.subheader("**–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ü—Ä–æ–≥–Ω–æ–∑–∞:**")
        st.write(f"**–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å:** {probability:.4f}")
        st.write(f"**–ö–ª–∞—Å—Å:** {predicted_class}")

        if predicted_class == "–ë–æ–ª–µ–Ω":
            st.error("–ú–æ–¥–µ–ª—å –ø—Ä–µ–¥—Å–∫–∞–∑—ã–≤–∞–µ—Ç, —á—Ç–æ –≤—ã –±–æ–ª—å–Ω—ã.")
        else:
            st.success("–ú–æ–¥–µ–ª—å –ø—Ä–µ–¥—Å–∫–∞–∑—ã–≤–∞–µ—Ç, —á—Ç–æ –≤—ã –∑–¥–æ—Ä–æ–≤—ã.")

        st.subheader("**–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π —Å –Ω–æ—Ä–º–∞–ª—å–Ω—ã–º–∏ –¥–∏–∞–ø–∞–∑–æ–Ω–∞–º–∏**")
        fig, ax = plt.subplots(figsize=(8, 5))
        features = ['–í–æ–∑—Ä–∞—Å—Ç', '–í–∏—Å—Ü–µ—Ä–∞–ª—å–Ω—ã–π –∂–∏—Ä, %', '–ú—ã—à–µ—á–Ω–∞—è –º–∞—Å—Å–∞, %', '–ò–ú–¢', '–ê–õ–¢ (–µ–¥/–ª)', '–ê–°–¢ (–µ–¥/–ª)', '–ì–ì–¢–ü (–µ–¥/–ª)', '–õ–ü–ù–ü', '–§–µ—Ä—Ä–∏—Ç–∏–Ω', '–û–±—â–∏–π –±–µ–ª–æ–∫ (–≥/–ª)']
        user_values = [age, vis_fat, muscle_mass, bmi, alt, ast, ggtp, ldl, ferritin, total_protein]
        normal_min = [normal_ranges[feat][0] for feat in features]
        normal_max = [normal_ranges[feat][1] for feat in features]

        for i, (min_val, max_val) in enumerate(zip(normal_min, normal_max)):
            ax.plot([min_val, max_val], [i, i], color='gray', lw=6, alpha=0.5, label='–ù–æ—Ä–º–∞–ª—å–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω' if i == 0 else "")

        ax.scatter(user_values, range(len(features)), color='blue', s=100, zorder=5, label='–í–∞—à–∏ –∑–Ω–∞—á–µ–Ω–∏—è')

        ax.set_xlabel('–ó–Ω–∞—á–µ–Ω–∏—è', fontsize=12, fontweight='bold')
        ax.set_title('–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π —Å –Ω–æ—Ä–º–∞–ª—å–Ω—ã–º–∏ –¥–∏–∞–ø–∞–∑–æ–Ω–∞–º–∏', fontsize=14, fontweight='bold')

        ax.set_yticks(range(len(features)))
        ax.set_yticklabels(features, fontsize=11, fontweight='bold')
        ax.tick_params(axis='x', labelsize=10)
        ax.xaxis.label.set_size(12)

        ax.spines['right'].set_visible(False)
        ax.spines['top'].set_visible(False)

        ax.spines['left'].set_linewidth(1.5)
        ax.spines['bottom'].set_linewidth(1.5)

        ax.grid(True, axis='x', linestyle='--', alpha=0.6)

        ax.legend(loc='lower right', fontsize=10)

        st.pyplot(fig)

st.write("---")
st.write("–≠—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ –¥–ª—è –ø–æ–º–æ—â–∏ –≤ –ø—Ä–æ–≥–Ω–æ–∑–µ –ù–ê–ñ–ë–ü –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π.")
st.write("–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –±–∏–æ—Ö–∏–º–∏—á–µ—Å–∫–∏–µ –º–∞—Ä–∫–µ—Ä—ã, –∏–Ω–¥–µ–∫—Å –º–∞—Å—Å—ã —Ç–µ–ª–∞, –∏ –¥—Ä—É–≥–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã.")
st.write("–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ù–ï —Å–æ–∑–¥–∞–Ω–æ –¥–ª—è —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ–π –ø–æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –¥–∏–∞–≥–Ω–æ–∑–∞.")

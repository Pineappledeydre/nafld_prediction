import streamlit as st
import numpy as np
import matplotlib.pyplot as plt
import json

intercept = 4.5729182157694765

with open('contributions.json', 'r') as f:
    contributions = json.load(f)
contributions = [np.array(c) for c in contributions]  

with open('bin_edges.json', 'r') as f:
    bin_edges = json.load(f)

feature_min = np.array([0.000e+00, 2.500e+01, 1.770e+01, 5.000e+00, 2.710e+01, 2.000e+00,
                        3.070e+01, 1.179e+03, 8.900e+01, 7.600e+01, 8.400e+01, 8.600e+01,
                        2.093e+01, 7.100e+00, 9.000e+00, 8.000e+00, 4.200e+01, 3.260e+00,
                        1.300e+00, 7.000e-01, 3.600e-01, 4.400e+00, 1.900e+00, 4.100e+00])

feature_max = np.array([1.000e+00, 6.000e+01, 4.740e+01, 2.600e+01, 4.870e+01, 4.700e+00,
                        6.140e+01, 2.156e+03, 1.320e+02, 1.340e+02, 1.350e+02, 1.340e+02,
                        4.232e+01, 1.237e+02, 1.040e+02, 1.440e+02, 1.560e+02, 7.800e+00,
                        5.900e+00, 2.800e+00, 5.510e+00, 3.140e+01, 1.740e+01, 7.900e+00])

def predict_log_odds(intercept, contributions, feature_values, bin_edges):
    log_odds = intercept
    for i, value in enumerate(feature_values):
        bin_idx = np.digitize(value, bin_edges[i]) - 1
        bin_idx = min(bin_idx, len(contributions[i]) - 1)
        log_odds += contributions[i][bin_idx]
    return log_odds

def predict_probability(log_odds):
    return 1 / (1 + np.exp(-log_odds))

def min_max_scaler(values, feature_min, feature_max):
    scaled_values = (values - feature_min) / (feature_max - feature_min)
    return scaled_values

# Streamlit page setup
st.set_page_config(page_title="–ü—Ä–æ–≥–Ω–æ–∑ –ù–ê–ñ–ë–ü", page_icon="üíâ", layout="wide")

st.title("üíâ –ü—Ä–æ–≥–Ω–æ–∑ –ù–ê–ñ–ë–ü")
st.write("–í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∞ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –ù–ê–ñ–ë–ü.")

gender = st.radio("**–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª:**", ("–ú—É–∂—Å–∫–æ–π", "–ñ–µ–Ω—Å–∫–∏–π"))
gender_value = 0 if gender == "–ú—É–∂—Å–∫–æ–π" else 1

if gender == "–ú—É–∂—Å–∫–æ–π":
    normal_ranges = {
        '–í–æ–∑—Ä–∞—Å—Ç': (0, 100),
        '–û.–∂.,%': (10, 25),
        '–í–∏—Å—Ü.–∂,%': (5, 15),
        '–°–∫–µ–ª–µ—Ç,%': (30, 40),
        '–ö–æ—Å—Ç–∏,–∫–≥': (2, 5),
        '–í–æ–¥–∞,%': (50, 70),
        '–°–û–û–í,–∫–∫–∞–ª': (1500, 3500),
        '–û–ì,—Å–º': (75, 105),
        '–û–¢,—Å–º': (60, 95),
        '–û–ñ,—Å–º': (70, 105),
        '–û–ë,—Å–º': (40, 65),
        '–ò–ú–¢': (18.5, 24.9),
        '–ê–õ–¢': (7, 41),
        '–ê–°–¢': (10, 40),
        '–ì–ì–¢–ü': (10, 70),
        '–©–§': (40, 130),
        '–•–°–æ–±—â.': (0, 5.2),
        '–õ–ü–ù–ü': (0, 3.0),
        '–õ–ü–í–ü': (1.0, 1.5),
        '–¢—Ä–∏–≥–ª–∏—Ü.': (0, 1.7),
        '–ë–∏–ª–∏—Ä.–æ': (0, 1.2),
        '–ë–∏–ª–∏—Ä.–ø—Ä': (0, 0.3),
        '–ì–ª—é–∫–æ–∑–∞': (3.9, 5.5)
    }
else:
    normal_ranges = {
        '–í–æ–∑—Ä–∞—Å—Ç': (0, 100),
        '–û.–∂.,%': (18, 30),
        '–í–∏—Å—Ü.–∂,%': (5, 15),
        '–°–∫–µ–ª–µ—Ç,%': (25, 35),
        '–ö–æ—Å—Ç–∏,–∫–≥': (1.5, 4),
        '–í–æ–¥–∞,%': (50, 60),
        '–°–û–û–í,–∫–∫–∞–ª': (1200, 3000),
        '–û–ì,—Å–º': (75, 100),
        '–û–¢,—Å–º': (60, 90),
        '–û–ñ,—Å–º': (70, 100),
        '–û–ë,—Å–º': (35, 60),
        '–ò–ú–¢': (18.5, 24.9),
        '–ê–õ–¢': (7, 35),
        '–ê–°–¢': (10, 35),
        '–ì–ì–¢–ü': (10, 50),
        '–©–§': (40, 120),
        '–•–°–æ–±—â.': (0, 5.2),
        '–õ–ü–ù–ü': (0, 3.0),
        '–õ–ü–í–ü': (1.0, 1.5),
        '–¢—Ä–∏–≥–ª–∏—Ü.': (0, 1.7),
        '–ë–∏–ª–∏—Ä.–æ': (0, 1.2),
        '–ë–∏–ª–∏—Ä.–ø—Ä': (0, 0.3),
        '–ì–ª—é–∫–æ–∑–∞': (3.9, 5.5)
    }

col1, col2 = st.columns(2)

with col1:
    st.header("**–í–≤–µ–¥–∏—Ç–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:**")
    age = st.number_input("**–í–æ–∑—Ä–∞—Å—Ç**", min_value=0, max_value=100, value=30)
    total_fat = st.number_input("**–û.–∂.,%**", min_value=0.0, max_value=100.0, value=20.0)
    vis_fat = st.number_input("**–í–∏—Å—Ü.–∂,%**", min_value=0.0, max_value=100.0, value=5.0)
    skeletal_mass = st.number_input("**–°–∫–µ–ª–µ—Ç,%**", min_value=0.0, max_value=100.0, value=40.0)
    bone_mass = st.number_input("**–ö–æ—Å—Ç–∏,–∫–≥**", min_value=0.0, max_value=20.0, value=3.0)
    water = st.number_input("**–í–æ–¥–∞,%**", min_value=0.0, max_value=100.0, value=60.0)
    metabolic_rate = st.number_input("**–°–û–û–í,–∫–∫–∞–ª**", min_value=0.0, max_value=5000.0, value=2000.0)
    chest = st.number_input("**–û–ì,—Å–º**", min_value=0.0, max_value=150.0, value=90.0)
    waist = st.number_input("**–û–¢,—Å–º**", min_value=0.0, max_value=150.0, value=80.0)
    hip = st.number_input("**–û–ñ,—Å–º**", min_value=0.0, max_value=150.0, value=100.0)
    thigh = st.number_input("**–û–ë,—Å–º**", min_value=0.0, max_value=150.0, value=55.0)
    bmi = st.number_input("**–ò–ú–¢**", min_value=0.0, max_value=100.0, value=24.0)
    alt = st.number_input("**–ê–õ–¢**", min_value=0.0, max_value=200.0, value=30.0)
    ast = st.number_input("**–ê–°–¢**", min_value=0.0, max_value=200.0, value=30.0)
    ggtp = st.number_input("**–ì–ì–¢–ü**", min_value=0.0, max_value=200.0, value=15.0)

with col2:
    alkaline_phosphatase = st.number_input("**–©–§**", min_value=0.0, max_value=500.0, value=100.0)
    cholesterol = st.number_input("**–•–°–æ–±—â.**", min_value=0.0, max_value=500.0, value=200.0)
    ldl = st.number_input("**–õ–ü–ù–ü**", min_value=0.0, max_value=100.0, value=3.0)
    hdl = st.number_input("**–õ–ü–í–ü**", min_value=0.0, max_value=100.0, value=1.0)
    triglycerides = st.number_input("**–¢—Ä–∏–≥–ª–∏—Ü.**", min_value=0.0, max_value=100.0, value=1.5)
    bilirubin_total = st.number_input("**–ë–∏–ª–∏—Ä.–æ**", min_value=0.0, max_value=10.0, value=1.0)
    bilirubin_direct = st.number_input("**–ë–∏–ª–∏—Ä.–ø—Ä**", min_value=0.0, max_value=100.0, value=0.5)
    glucose = st.number_input("**–ì–ª—é–∫–æ–∑–∞**", min_value=0.0, max_value=100.0, value=5.0)

    if st.button("–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –ü—Ä–æ–≥–Ω–æ–∑"):
        input_features = [
            gender_value, age, total_fat, vis_fat, skeletal_mass, bone_mass, 
            water, metabolic_rate, chest, waist, hip, thigh, bmi, alt, ast, 
            ggtp, alkaline_phosphatase, cholesterol, ldl, hdl, triglycerides, 
            bilirubin_total, bilirubin_direct, glucose
        ]

        scaled_features = min_max_scaler(np.array(input_features), np.array(feature_min), np.array(feature_max))
        log_odds = predict_log_odds(intercept, contributions, scaled_features, bin_edges)
        probability = predict_probability(log_odds)

        predicted_class = "–ë–æ–ª–µ–Ω" if probability >= 0.5 else "–ó–¥–æ—Ä–æ–≤"

        st.subheader("**–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ü—Ä–æ–≥–Ω–æ–∑–∞:**")
        st.write(f"**–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å:** {probability:.4f}")
        st.write(f"**–ö–ª–∞—Å—Å:** {predicted_class}")

        if predicted_class == "–ë–æ–ª–µ–Ω":
            st.error("–ú–æ–¥–µ–ª—å –ø—Ä–µ–¥—Å–∫–∞–∑—ã–≤–∞–µ—Ç, —á—Ç–æ –≤—ã –±–æ–ª—å–Ω—ã.")
        else:
            st.success("–ú–æ–¥–µ–ª—å –ø—Ä–µ–¥—Å–∫–∞–∑—ã–≤–∞–µ—Ç, —á—Ç–æ –≤—ã –∑–¥–æ—Ä–æ–≤—ã.")

        st.subheader("**–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π —Å –Ω–æ—Ä–º–∞–ª—å–Ω—ã–º–∏ –¥–∏–∞–ø–∞–∑–æ–Ω–∞–º–∏**")
        fig, ax = plt.subplots(figsize=(8, 5))
        features = ['–í–æ–∑—Ä–∞—Å—Ç', '–û.–∂.,%', '–í–∏—Å—Ü.–∂,%', '–°–∫–µ–ª–µ—Ç,%', '–ö–æ—Å—Ç–∏,–∫–≥', '–í–æ–¥–∞,%', '–°–û–û–í,–∫–∫–∞–ª', '–û–ì,—Å–º', 
                    '–û–¢,—Å–º', '–û–ñ,—Å–º', '–û–ë,—Å–º', '–ò–ú–¢', '–ê–õ–¢', '–ê–°–¢', '–ì–ì–¢–ü', '–©–§', '–•–°–æ–±—â.', '–õ–ü–ù–ü', '–õ–ü–í–ü', 
                    '–¢—Ä–∏–≥–ª–∏—Ü.', '–ë–∏–ª–∏—Ä.–æ', '–ë–∏–ª–∏—Ä.–ø—Ä', '–ì–ª—é–∫–æ–∑–∞']
        user_values = input_features[1:]
        normal_min = [normal_ranges[feat][0] for feat in features]
        normal_max = [normal_ranges[feat][1] for feat in features]

        for i, (min_val, max_val) in enumerate(zip(normal_min, normal_max)):
            ax.plot([min_val, max_val], [i, i], color='gray', lw=6, alpha=0.5, label='–ù–æ—Ä–º–∞–ª—å–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω' if i == 0 else "")

        ax.scatter(user_values, range(len(features)), color='blue', s=100, zorder=5, label='–í–∞—à–∏ –∑–Ω–∞—á–µ–Ω–∏—è')

        ax.set_xlabel('–ó–Ω–∞—á–µ–Ω–∏—è', fontsize=12, fontweight='bold')
        ax.set_title('–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π —Å –Ω–æ—Ä–º–∞–ª—å–Ω—ã–º–∏ –¥–∏–∞–ø–∞–∑–æ–Ω–∞–º–∏', fontsize=14, fontweight='bold')

        ax.set_yticks(range(len(features)))
        ax.set_yticklabels(features, fontsize=11, fontweight='bold')
        ax.tick_params(axis='x', labelsize=10)
        ax.xaxis.label.set_size(12)

        ax.spines['right'].set_visible(False)
        ax.spines['top'].set_visible(False)
        ax.spines['left'].set_linewidth(1.5)
        ax.spines['bottom'].set_linewidth(1.5)

        ax.grid(True, axis='x', linestyle='--', alpha=0.6)
        ax.legend(loc='lower right', fontsize=10)

        st.pyplot(fig)

st.write("---")
st.write("–≠—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ –¥–ª—è –ø–æ–º–æ—â–∏ –≤ –ø—Ä–æ–≥–Ω–æ–∑–µ –ù–ê–ñ–ë–ü –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π.")
st.write("–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –±–∏–æ—Ö–∏–º–∏—á–µ—Å–∫–∏–µ –º–∞—Ä–∫–µ—Ä—ã, –∏–Ω–¥–µ–∫—Å –º–∞—Å—Å—ã —Ç–µ–ª–∞, –∏ –¥—Ä—É–≥–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã.")
st.write("–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ù–ï —Å–æ–∑–¥–∞–Ω–æ –¥–ª—è —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ–π –ø–æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –¥–∏–∞–≥–Ω–æ–∑–∞.")
